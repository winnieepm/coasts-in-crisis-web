<?php

/**
 * @file
 * This file contains the hooks for Footnotes module.
 *
 * The Footnotes module is a filter that can be used to insert
 * automatically numbered footnotes into Drupal texts.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function footnotes_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.footnotes':
      return
        t('Insert automatically numbered footnotes using &lt;fn&gt; or [fn] tags. Enable the footnotes text filter @here',
          ['@here' => Drupal::l(t('here'), Url::fromRoute('filter.admin_overview'))]
        );
  }
}

/**
 * Implements hook_theme().
 *
 * Thanks to emfabric for this implementation. http://drupal.org/node/221156
 */
function footnotes_theme() {
  return [
    'footnote_link' => [
      'render element' => 'fn',
      'function' => 'theme_footnote_link',
    ],
    'footnote_list' => [
      'render element' => 'footnotes',
      'function' => 'theme_footnote_list',
    ],
  ];
}

/**
 * Themed output of a footnote link appearing in the text body.
 *
 * Accepts a single associative array, containing values on the following keys:
 *   text - the raw unprocessed text extracted from within the [fn] tag.
 *   text_clean - a sanitized version of the previous, may be used as HTML
 *   attribute value.
 *   value - the raw unprocessed footnote number or other identifying label.
 *   fn_id - the globally unique identifier for the in-body footnote link
 *   anchor, used to allow links from the list to the body.
 *   ref_id - the globally unique identifier for the footnote's anchor in
 *   the footnote listing, used to allow links to the list from the body.
 */
function theme_footnote_link($fn) {
  // @todo: change this ugly array for arguments in the function.
  $fn = $fn['fn']['fn'];
  return '<a class="see-footnote" id="' . $fn['ref_id'] .
    '" title="' . $fn['text_clean'] . '" href="#' . $fn['fn_id'] . '">' .
    $fn['value'] . '</a>';
}

/**
 * Themed output of the footnotes list appearing at at [footnotes].
 *
 * Accepts an array containing an ordered listing of associative arrays, each
 * containing values on the following keys:
 *   text   - the raw unprocessed text extracted from within the [fn] tag
 *   text_clean - a sanitized version of the previous, may be used as HTML
 *   attribute value.
 *   value - the raw unprocessed footnote number or other identifying label
 *   fn_id - the globally unique identifier for the in-body footnote link
 *   anchor, used to allow links from the list to the body.
 *   ref_id - the globally unique identifier for the footnote's anchor in the
 *   footnote listing, used to allow links to the list from the body.
 */
function theme_footnote_list($footnotes) {
  // @todo: change this ugly array for arguments in the function.
  $footnotes = $footnotes['footnotes']['#footnotes'];
  $str = '<ul class="footnotes">';
  // Drupal 7 requires we use "render element" which just introduces a wrapper
  // around the old array.
  // $footnotes = $footnotes['footnotes'];
  // loop through the footnotes.
  foreach ($footnotes as $fn) {
    if (!is_array($fn['ref_id'])) {
      // Output normal footnote.
      $str .= '<li class="footnote" id="' . $fn['fn_id'] . '"><a class="footnote-label" href="#' . $fn['ref_id'] . '">' . $fn['value'] . '.</a> ';
      $str .= $fn['text'] . "</li>\n";
    }
    else {
      // Output footnote that has more than one reference to it in the body.
      // The only difference is to insert backlinks to all references.
      // Helper: we need to enumerate a, b, c...
      $abc = str_split("abcdefghijklmnopqrstuvwxyz");
      $i = 0;

      $str .= '<li class="footnote" id="' . $fn['fn_id'] . '"><a href="#' . $fn['ref_id'][0] . '" class="footnote-label">' . $fn['value'] . '.</a> ';
      foreach ($fn['ref_id'] as $ref) {
        $str .= '<a class="footnote-multi" href="#' . $ref . '">' . $abc[$i] . '.</a> ';
        $i++;
      }
      $str .= $fn['text'] . "</li>\n";
    }
  }
  $str .= "</ul>\n";
  return $str;
}

/**
 * Helper for other filters, check if Footnotes is present in your filter chain.
 *
 * Note: Due to changes in Filter API, the arguments to this function have
 * changed in Drupal 7.
 *
 * Other filters may leverage the Footnotes functionality in a simple way:
 * by outputting markup with <fn>...</fn> tags within.
 *
 * This creates a dependency, the Footnotes filter must be present later in
 * "Input format". By calling this helper function the other filters that
 * depend on Footnotes may check whether Footnotes is present later in the chain
 * of filters in the current Input format.
 *
 * If this function returns true, the caller may depend on Footnotes. Function
 * returns false if caller may not depend on Footnotes.
 *
 * You should also put "dependencies = footnotes" in your module.info file.
 *
 * Example usage:
 * <code>
 * _filter_example_process( $text, $filter, $format ) {
 *   ...
 *   if(footnotes_is_footnotes_later($format, $filter)) {
 *     //output markup which may include [fn] tags
 *   }
 *   else {
 *     // must make do without footnotes features
 *     // can also emit warning/error that user should install and configure
 *     // footnotes module
 *   }
 *   ...
 * }
 * </code>
 *
 * @param object $format
 *    The text format object caller is part of.
 * @param object $caller_filter
 *    The filter object representing the caller (in this text format).
 *
 * @return True
 *    If Footnotes is present after $caller in $format.
 */
function footnotes_is_footnotes_later($format, $caller_filter) {
  return $format['filter_footnotes']['weight'] > $caller_filter['weight'];
}
